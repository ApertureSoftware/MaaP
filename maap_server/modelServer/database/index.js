/** * File: index.js * Module: maap_server::modelServer::database * Author: Andrea Perin * Created: 12/05/14 * Version: 1.0.0 * Description: inizializzazione database * Modification History: ============================================== * Version | Changes ============================================== * 0.1 File creation ============================================== */  //mostra tutti i warning possibili'use strict';//richiedo il modulo mongoose per operare sui databasevar mongoose = require('mongoose');//richiedo il modulo contenente lo schema del database degli utentivar userDBManager = require('./MongooseDBFramework');//richiedo il modulo contenente lo schema del database di analisivar dataDBManager = require('./MongooseDBAnalysis'); /** * Aggiunge un utente amministratore di default nel database degli utenti * *@param config - configurazione dell'applicazione  *@param userDB - stringa di connessione al database utenti */var addAdminDefault = function(config, userDB){	var collection = config.userDB.usersCollection;	var usersModel = require('./MongooseDBFramework').users;	var dataRetriever = require('../dataManager/DatabaseUserManager/DataRetrieverUsers');	//costruisco una email di default per l'admin	var emailDefault = 'admin@admin.com';	//costruisco la password di default per l'admin	var passwordDefault = 'password';	//costruisco il livello di default per l'admin, ovvero livello 1	var levelDefault = 1;	//il database degli utenti non è pronto, prima devono essere effettuati dei controlli	var userDBisReady = false;		//conto sul database quanti amministratori ci sono	userDBManager.users.count({level:1}, function(err, usersCount){		if(err)		{			console.log('Errore controllo collection utenti: ' + err);		}else if(usersCount == 0){			//se entro qui allora non ci sono amministratori, quindi bisogna crearne uno			dataRetriever.addUser(emailDefault, passwordDefault, levelDefault, function(done){				if(done)				{					//se l'aggiunta dell'amministratore è andata a buon fine, allora si stampa sulla console una serie di messaggi contenenti informazioni riguardanti la creazioen dell'utente amministratore di default					console.log('');					console.log('  ----------------------------------------------------------------------------------');					console.log('    default administrator login created:');					//viene stampata la email di default dell'amministratore					console.log('    default email: ' + emailDefault)					//viene stampata la password di default dell'amministratore					console.log('    default password: ' + passwordDefault);					//messaggio di avviso di cambiare credenziali					console.log('    for security reasons please change your credentials after the first login.');					console.log('  ----------------------------------------------------------------------------------');					console.log('');				}else{					//l'aggiunta dell'utente amministratore di default non è andata a buon fine, quindi si avvisa con opportuni messaggi					console.log('');					console.log('  ----------------------------------------------------------------------------------');					console.log('    maap got some errors while setting up the default administrator login data :(');					console.log('  ----------------------------------------------------------------------------------');					console.log('');				}			});		}else{			if(config.app.env == 'development')			{				//ci sono già degli utenti amministratori presenti				console.log('');				console.log('  ----------------------------------------------------------------------------------');				//viene stampato il numero di amministratori già presenti nel sistema				console.log('    usersDB: found ' + usersCount + ' admin users! no need to add a default one');				console.log('  ----------------------------------------------------------------------------------');				console.log('');			}		}		//il database degli utenti è pronto		userDBisReady = true;	});	//ciclo che controlla se il database utenti è pronto oppure no	while(!userDBisReady){require('deasync').sleep(100);}}//for unit testexports.addAdminDefault = addAdminDefault; /** * Si connette al database utenti, database di analisi ed inizializza i vari rispettivi moduli. * *@param app - applicazione express contenente la configurazione del sistema */var initDB = function(app) {	var config = app.config;		console.log('databases init... ');		//prendo le configurazioni per la connessione al database degli utenti	var userDB2connect = config.userDB.host + ':' + config.userDB.port + "/" + config.userDB.db_name;	if(config.userDB.username != '' && config.userDB.password != '')	{		userDB2connect = config.userDB.username + ':' + config.userDB.password + '@' + userDB2connect;	}	userDB2connect = 'mongodb://' + userDB2connect;		//messaggio di connessione al database	console.log('connecting to user db: ' + userDB2connect + ' ...');	var userDBisReady = false;		//createConnection usato per creare connessioni multiple a diversi db	var userDB = mongoose.createConnection(userDB2connect);		app.db = {};	app.db.users = userDB;		//messaggio che avvisa che la connessione al database è fallita	userDB.on('error', console.error.bind(console, 'connection failed! check your users\'s mongodb path!\n'));	userDB.once('open', function callback() {		//connessione al db andata a buon fine		console.log('successfully connected to user\'s database!');		//database pronto		userDBisReady = true;	});		while(!userDBisReady){require('deasync').sleep(100);}	userDBManager.init(app);	addAdminDefault(config, userDB);		//prendo le configurazioni per la connessione al database di analisi	var analysisDB2connect = config.dataDB.host + ':' + config.dataDB.port + "/" + config.dataDB.db_name;	if(config.dataDB.username != '' && config.dataDB.password != '')	{		analysisDB2connect = config.dataDB.username + ':' + config.dataDB.password + '@' + analysisDB2connect;	}	analysisDB2connect = 'mongodb://' + analysisDB2connect;		//messaggio di connessione al database	console.log('connecting to data db: ' + analysisDB2connect + ' ...');	//database non ancora pronto	var dataDBisReady = false;		var dataDB = mongoose.createConnection(analysisDB2connect);		app.db.data = dataDB;		//messaggio che avvisa che la connessione al database è fallita	dataDB.on('error', console.error.bind(console, 'connection failed! check your data\'s mongodb path!\n'));	dataDB.once('open', function callback() {	//connessione al db andata a buon fine		console.log('successfully connected to data\'s database!');			//db pronto		dataDBisReady = true;	});		while(!dataDBisReady){require('deasync').sleep(100);}	dataDBManager.init(app);	}//esporta la funzione initexports.init = initDB;