/** * File: JSonComposer.js * Module: maap_server::modelServer::dataManager * Author: Michele Maso * Created: 04/05/14 * Version: 1.0.0 * Description: JSON composer... * Modification History: ============================================== * Version | Changes ============================================== * 0.1 File creation ============================================== *///mostra tutti i warning possibili'use strict';/** La funzione riceve come parametro un Array di Collection, crea e ritorna l'oggetto *JSON rappresentante l'insieme delle Collection. * *@param collectionsList - Array di collection. */exports.createCollectionsList = function(collectionsList) {	//costruisco un array di label vuoto	var collectionsLabels = [];	//costruisco un array di nomi vuoto	var collectionsNames = [];	//costruisco un array di positions vuoto	var collectionsPositions = [];	//scorro la lista di collection	for(var i=0; i<collectionsList.length; i++)	{		//inserisco nell'array di labels la label della collection i-esima		collectionsLabels.push(collectionsList[i].label);		//inserisco nell'array di names il name della collection i-esima		collectionsNames.push(collectionsList[i].name); 		//inserisco nell'array di positions la positions della collection i-esima		collectionsPositions.push(collectionsList[i].position);	}		//costruisco un oggetto JSON vuoto		var json =  {};	//aggiungo all'oggetto l'array di labels	json.labels = collectionsLabels;	//aggiungo all'oggetto l'array di names	json.data = collectionsNames;	//aggiungo all'oggetto l'array di positions	json.positions = collectionsPositions;	//trasformo l'oggetto JSON in stringa		var jsonString = JSON.stringify(json);//ritorno la stringa appena creata		return jsonString;}/** *Scorre l'Array di label e ritorna true se fra essi è presente il campo id o il flag IDLABEL2SHOW , ritorna false altrimenti. * *@param labelsArray - Array di etichette di una Collection. */var checkLabels = function(labelsArray) {	//scorro l'array di labels	for(var i=0; i<labelsArray.length; i++)	{		//controllo ciascuna label dell'array		if(labelsArray[i].indexOf('__IDLABEL2SHOW__') == 0 || labelsArray[i] == '_id')			//se la label è '_id' o contiene '__IDLABEL2SHOW__' allora ritorno true			return true;	}	//se non trovo niente allora ritorno false	return false;}//esporto la funzione checkLabelsexports.checkLabels=checkLabels;/** *Scorre l'intero Array di dati della Collection e salva i suoi elementi in un Array locale.  *Esegue un controllo sull'Array di label per identificare la presenza dell'etichetta IDLABEL2SHOW , la quale definisce di far visualizzare il campo id nel Client. *Dopo aver formattato correttamente gli elementi della Collection, ritorna il JSON corrispondente, aggiungendo l'oggetto config contenente le cofigurazioni *dell'oggetto utili al Client. * *@param labels - Array contenente l'elenco delle etichette della Collection da creare *@param data - Array contenente i dati sensibili della Collection *@param config - Oggetto contenente impostazioni di configurazione. */exports.createCollection = function(labels,data,config) {	var dataArray = [];	//chiamo checklabels sulle etichette passate	var idLabelIsPresent = checkLabels(labels);	//scorro i document	for(var i=0; i<data.length; i++) {		var obj = data[i];		//creo un blocco dati		var dataBlock = {}				//ID del document, sempre presente				dataBlock._id = obj._id;						dataBlock.data = {};				for(var attributename in obj){		//console.log(attributename + ': ' + obj[attributename]);			if(attributename != '_id' )			{				//se l'attributo del document non è _id carico l'attributo				dataBlock.data[attributename] = obj[attributename]; 			}else{				if(idLabelIsPresent)				{					//se la label contiene l'attributo _id o che contiene '__IDLABEL2SHOW__'					for(var j=0; j<labels.length; j++)					{						//pulisco l'etichetta						if(labels[j].indexOf('__IDLABEL2SHOW__') == 0)							labels[j] = labels[j].substr(16);					}					dataBlock.data[attributename] = obj[attributename];				}			}		}			//console.log(dataBlock);			dataArray.push(dataBlock);	}		//creo il json principale: un array di labels, data e config	var json = [];	json.push(labels);	json.push(dataArray);	json.push(config);		console.log('JSONcomposerCOL:');	console.log(JSON.stringify(json));	//costruisco una stringa dal JSON precedente	var jsonString = JSON.stringify(json);	//ritorno la stringa creata	return jsonString;};/** *Scorre l'intero Array di dati del Document e salva i suoi elementi in un Array locale. *Esegue un controllo sull'Array di label per identificare la presenza dell'etichetta *IDLABEL2SHOW , la quale definisce di far visualizzare il campo id nel Client. *Dopo aver formattato correttamente gli elementi del Document, ritorna il JSON corrispondente. * *@param labels - Array contenente l'insieme delle query da creare. *@param data - Oggetto contenente impostazioni di configurazione. */exports.createDocument = function(labels,data) {	//creo il json principale: un array di labels, e data 	var json = {};	json.label = labels;	json.data = {};	//chiamo checklabels sulle etichette passate	var idLabelIsPresent = checkLabels(labels);			for(var attributename in data)	{		if(attributename != '_id' )		{			//se l'attributo del document non è _id carico l'attributo			json.data[attributename] = data[attributename];		}else{			if(idLabelIsPresent)			{				//se la label contiene l'attributo _id o che contiene '__IDLABEL2SHOW__'				for(var j=0; j<labels.length; j++)				{					//pulisco l'etichetta					if(labels[j].indexOf('__IDLABEL2SHOW__') == 0)						labels[j] = labels[j].substr(16);				}				json.data[attributename] = data[attributename];			}		}	}		console.log('JSONcomposerDOC:');	console.log(json);	//costruisco una stringa dal JSON precendente	var jsonString = JSON.stringify(json);	//ritorno la stringa creata	return jsonString;};/** *Viene creato localmente l'Array contenente le etichette dell'oggetto lista di query. *Viene successivamente scorso l'Array delle query e vengono copiati localmente *i loro campi sensibili, per poi essere formattati correttamente. *Infine viene realizzato e ritornato il JSON corrispondente, aggiungendo l'oggetto contenente le *impostazioni di configurazione della lista di query. * *@param queries - Array contenente l'insieme delle query da creare. *@param config - Oggetto contenente impostazioni di configurazione. */exports.createQueriesList = function(queries, config){	//creo il json principale: un array di labels, e data 	var labels = [];	var data = [];		//carico le etichette	labels.push('Collection Name');	labels.push('Selected fields');		labels.push('Score');			//scorro l'array	for(var i=0; i<queries.length; i++)	{		var dataBlock = {};		//prelevo l'id i-esimo		dataBlock._id = queries[i]._id;		var selectedFields = '';		//prendo i campi della query i-esima		var select = queries[i].select;		for(var key in select)		{			//per ogni campo della query costruisco una stringa contenente i campi della query, separati da una virgola			selectedFields += key + ', ';		}				//rimuovo l'ultima virgola e spazio		selectedFields = selectedFields.substring(0, selectedFields.length - 2);				dataBlock.data = {name: queries[i].collection_name, fields: selectedFields, score: queries[i].counter};		data.push(dataBlock);		//console.log(JSON.stringify(queries[i]));	}					var json = [];	json.push(labels);	json.push(data);	json.push(config);		console.log('JSONcomposerQUERIES:');	console.log(json);	//creo una stringa dal JSON precedente	var jsonString = JSON.stringify(json);	//ritorno la stringa creata	return jsonString;};/** * Viene creato localmente l'Array contenente le etichette dell'oggetto lista di indici. *Viene successivamente scorso l'Array degli indici e vengono copiati localmente i loro *campi sensibili, per poi essere formattati correttamente. Infine viene realizzato e ritornato il JSON corrispondente. * *@param indexes - Array contenente l'insieme di indici da creare. *@param config - Oggetto contenente impostazioni di configurazione. */exports.createIndexesList = function(indexes, config){	//creo il json principale: un array di labels, e data 	var labels = [];	var data = [];		//carico le etichette	labels.push('Index name');	labels.push('Collection');	labels.push('Selected fields');			//scorro l'array di oggetti	for(var i=0; i<indexes.length; i++)	{		var dataBlock = {};		dataBlock._id = indexes[i].indexName;		//prelevo il nome i-esimo		dataBlock.data = {};		dataBlock.data.name = indexes[i].indexName;		//prendo il nome della collection		dataBlock.data.collection = indexes[i].collectionName;		dataBlock.data.fields = '';		//prendo i campi dell'indice		var fields = indexes[i].indexFields;		//scorro i campi del'indice		for(var j=0; j<fields.length; j++)		{			if(j != 0) 				//per ogni campo dell'indice costruisco una stringa contenente i campi dell'indice, separati da una virgola				dataBlock.data.fields += ', ';			dataBlock.data.fields += fields[j][0];		}						//console.log(JSON.stringify(indexes[i]));		data.push(dataBlock);			}			console.log('JSONcomposerINDEXES:');		var json = [];	json.push(labels);	json.push(data);	json.push(config);		console.log(json);	//costruisco la stringa dal JSON precendente	var jsonString = JSON.stringify(json);	//ritorno la stringa creata	return jsonString;};/** *Viene interpretato il campo numerico level e convertito nella stringa corrispon- *dente al livello di accesso dell'utente da creare. Viene infine ritornato il JSON *corrispondente. * *@param user - Oggetto contenente i campi email e livello di accesso di un utente. */exports.createUserProfile = function(user){	//creo il json principale: un array di labels, e data 	var json = {};	json.label = [];	json.data = {};		//carico le etichette	json.label.push('Email');	json.label.push('Level');	json.data['email'] = user.email;		//controllo il livello dell'utente	if(user.level == 0)	{		//se è un utente normale		json.data['level'] = 'user';	}else{		//se è un utente amministratore		json.data['level'] = 'administrator';	}			console.log('JSONcomposerUserProfile:');	console.log(json);	//costruisco una stringa dal JSON precedente 	var jsonString = JSON.stringify(json);	//ritorno la stringa creata	return jsonString;};/** *Viene ritornato il JSON di un utente modificabile formattato correttamente. * *@param user - Oggetto contenente il campo email di un utente. */exports.createUserProfileEdit = function(user){	//creo il json principale: un array di labels, e data 	var json = {};	json.label = [];	json.data = {};		//carico le etichette e la mail	json.label.push('Email');	json.data['email'] = user.email;				console.log('JSONcomposerUserProfileEdit:');	console.log(json);		var jsonString = JSON.stringify(json);	return jsonString;};/** * Viene creato localmente l'Array delle etichette della lista utenti. Successivamente *viene copiato in un Array locale ogni utente e il campo level di ognuno viene *interpretato e convertito nella stringa corrispondente. Infine viene assemblato il *JSON della lista utenti e viene aggiunto l'oggetto contenente le impostazioni di *configurazione della lista. * *@param users - Array di oggetti utente. *@param config - Oggetto contenente impostazioni di congurazione. */exports.createUsersList = function(users, config){	//creo il json principale: un array di labels, e data 	var labels = [];	var data = [];			//carico le etichette	labels.push('ID');	labels.push('Email');	labels.push('Level');			for(var i=0; i<users.length; i++)	{		var dataBlock = {};		dataBlock._id = users[i]._id;		dataBlock.data = {};		dataBlock.data._id = users[i]._id;		dataBlock.data.email = users[i].email;		if(users[i].level == 0)		{			dataBlock.data.level = 'user';		}else{			dataBlock.data.level = 'administrator';		}		//console.log(dataBlock);		data.push(dataBlock);	}			var json = [];	json.push(labels);	json.push(data);	json.push(config);		console.log('JSONcomposerUSERLIST:');	console.log(json);		var jsonString = JSON.stringify(json);	return jsonString;};/** * Viene creato localmente lo scheletro dell'oggetto utente. Viene poi interpretato *l'intero contenuto nel campo level dell'oggetto user. Viene poi ritornato il JSON *dell'utente formattato correttamente. * *@param user - Oggetto contenente i campi id, email e livello di accesso di un utente. *///per l'adminexports.createUser = function(user){	//creo il json principale: un array di labels, e data 	var json = {};	json.label = [];	json.data = {};		//carico le etichette	json.label.push('ID');	json.label.push('Email');	json.label.push('Level');	json.data.id = user._id;	json.data.email = user.email;		if(user.level == 0)	{		json.data.level = 'user';	}else{		json.data.level = 'administrator';	}		console.log('JSONcomposerUserForAdmins:');	console.log(json);		var jsonString = JSON.stringify(json);	return jsonString;};