/** * File: passport.js * Module: maap_server::controller * Author: Fabio Miotto * Created: 03/05/14 * Version: 1.0.0 * Description: inizializzazione, gestione passport e nodemailer * Modification History: ============================================== * Version | Changes ============================================== * 0.1 File creation ============================================== */ //mostra tutti i warning possibili 'use strict';//prelevo il modulo passport per gestire l'autenticazionevar passport = require("passport");//prelevo il modulo nodemailer per gestire il recupero password dimenticatavar nodemailer = require("nodemailer");var LocalStrategy = require('passport-local').Strategy;var DB = require('../modelServer/database/MongooseDBFramework');//gestione recupero mail con nodemailervar smtpTransport;var mail = {}; /** *Viene inizializzato passport, facendo i controlli per il login sulle credenziali inserite lato client. *Inoltre viene gestito il recupero password tramite email *@param app contiene il middleware express */var initPassport = function(app) {	var config = app.config;		//stampo sulla console un messaggio di inializzazione di passport	console.log("passport init...");	app.use(passport.initialize());	app.use(passport.session());			passport.use(new LocalStrategy({		usernameField: 'email',		passwordField: 'password'	},		//funzione per controllare se nel database è presente un utente con le credenziali passate		function(email, password, done) {			//effettuo la query sul database utenti			DB.users.findOne({ email: email.toLowerCase(), password: password},function(err,user){				if(err) { console.log('errore!'); return done(err); }				//se non è presente l'utente				if(!user){					//stampo sulla console un messaggio di login fallito					console.log('login failed! wrong mail or password!');					//ritorno un messaggio di login fallito 					return done(null, false, { message: 'Incorrect username.' });				}				//console.log('OK');				//login andato a buon fine				return done(null, user);			});		}	));		passport.serializeUser(function(user, done) {		done(null, user);	});	passport.deserializeUser(function(user, done) {		done(null, user);	});		//servizio nodemailer config	smtpTransport = nodemailer.createTransport("SMTP",{		service: config.app.nodemailerConfig.service,		auth: {			user: config.app.nodemailerConfig.user,			pass: config.app.nodemailerConfig.pass		}	});		//impostazioni standard dell'email di recupero password	mail.from = config.app.title + ' <' + config.app.nodemailerConfig.user + '>'; 	mail.subject = config.app.title + ' password request';	}; /** *Recupera la password nel db utenti in base all'username indicato nella request ed invia la mail contenente username e password all'utente * *@param req contiene la richiesta di recupero password del client *@param res contiene la risposta da restituire al client *@param next callback alla chiamata successiva  */var forgotPassword = function(req, res, next){	var userMail = req.body.email.toLowerCase();			DB.users.findOne({ email: userMail},function(err,user){		if(err)		{			console.log('Forgot password request from ' + req.connection.remoteAddress + ' for user ' + userMail + ' failed: ' + err);			res.send(401);		}		if(!user)		{			console.log('Forgot password request from ' + req.connection.remoteAddress + ' for user ' + userMail + ' failed: no user found!');			res.send(401);		}else{					var userPassword = user.password;	//query nel db					var userProfileLink = req.config.app.host + ':' + req.config.app.port + '/profile';			if(req.config.app.ssl)			{				userProfileLink = 'https://' + userProfileLink;			}else{				userProfileLink = 'http://' + userProfileLink;			}						mail.to = userMail;						mail.text = req.config.app.title + ' received a forgot password request from: ' + req.connection.remoteAddress + '\nYour username is: ' + userMail + ' and your password is: ' + userPassword;			mail.text += '\nYou may manage your profile from your user profile: ' + userProfileLink;			mail.text += '\n\nIf you didn\'t request your password, ignore this mail.';							mail.html = '<p><b>' + req.config.app.title + '</b> received a forgot password request from: <b>' + req.connection.remoteAddress + '</b></p>';			mail.html += '<p>Here you have your account details:</p>';			mail.html += '<p>username: <b>' + userMail + '</b></p>';			mail.html += '<p>password: <b>' + userPassword + '</b></p>';			mail.html += '<p>You may manage your profile from your <a href="' + userProfileLink + '">user profile</a></p>';			mail.html += '<p>If you didn\'t request your password, ignore this mail.</p>';						//invio mail			smtpTransport.sendMail(mail, function(error, response){				if(error){					console.log(error);					res.send(401);				}else{					console.log('Forgot password request from ' + req.connection.remoteAddress + ' for user ' + userMail + ' has been sent: ' + response.message);					res.send(200);				}			});					}//end else if(!user)	}); //end DB.find};//esporto la funzione per gestire il recupero password dimenticataexports.forgotPassword = forgotPassword; /** *Viene controllato se l'admin effettua il login corretto * *@param req contiene la richiesta di controllo se l'admin è autenticato *@param res contiene la risposta da restituire al client *@param next callback alla chiamata successiva   */var checkAuthenticatedAdmin = function(req, res, next){		//if di controllo utente autenticato e livello=1, ovvero admin    if (req.isAuthenticated() && req.session.passport.user.level == 1)	{		//stampo sulla console un messaggio di controllo avvenuto con successo		console.log('check admin auth -> ok');		next();	}else{		//stampo sulla console che il controllo non è andato a buon fine, quindi l'utente non è admin		console.log('check admin auth -> fail');		//invio uno stato HTTP(401) al client, ovvero autenticazione fallita		res.send(401);	}} /** *Viene controllato se il login va a buon fine * *@param req contiene la richiesta di controllo per l'autenticazione *@param res contiene la risposta da restituire al client *@param next callback alla chiamata successiva    */var checkAuthenticated = function(req, res, next){    //if che controlla se l'utente è gia autenticato o no	if (!req.isAuthenticated())	{		//se entro qua, utente già autenticato, quindi stampo sulla console un messaggio		console.log('check auth -> fail');		//invio al client uno stato HTTP(401) di autenticazione fallita		res.send(401);	}else{		//autenticazione andata a buon fine		console.log('check auth -> ok');		next();	}} /** *Quando il client effettua una richiesta al server prima viene controllato se l'utente è autenticato * *@param req contiene la richiesta del client *@param res contiene la risposta da restituire al client *@param next callback alla chiamata successiva    */var checkNotAuthenticated = function(req, res, next){    //if che controlla se l'utente è già autenticato	if (req.isAuthenticated())	{		//se è già autenticato allora il controllo della non autenticazione è fallito		console.log('check NOT auth -> fail');		//invio un codice HTTP al client per avvisarlo		res.send(401);	}else{		//l'utente non è autenticato, quindi il controllo di non autenticazione è andato a buon fine		console.log('check NOT auth -> ok');		next();	}}exports.authenticate = passport.authenticate('local');//esporto la funzione per inizializzare passportexports.init = initPassport;//esporto la funzione per controllare se l'utente è autenticato adminexports.checkAuthenticatedAdmin = checkAuthenticatedAdmin;//esporto la funzione per controllare se l'utente è autenticatoexports.checkAuthenticated = checkAuthenticated;//esporto la funzione per il controllo della non autenticazioneexports.checkNotAuthenticated = checkNotAuthenticated;